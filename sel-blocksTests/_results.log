

    [info] Executing: |open | http://refactoror.net/_SelBlocks-testpage.html | |
    [info] Test case passed
    [info] Playing test case eval
    [info] Executing: |resetEmitted | | |
    [info] Executing: |emit | "dilbert".isOneOf("dilbert","dogbert","mordac") | |
    [info] Executing: |emit | "bob".isOneOf("dilbert","dogbert","mordac") | |
    [info] Executing: |emit | "red".mapTo("primary", ["red","green","blue"]) | |
    [info] Executing: |emit | "orange".mapTo("primary", ["red","green","blue"]) | |
    [info] Executing: |emit | "red".translate("e", "E") | |
    [info] Executing: |emit | "red".translate(["red", "green", "blue"], ["blue", "red", "green"]) | |
    [info] Executing: |assertEmitted | "true~false~primary~orange~rEd~blue" | |
    [info] Test case passed
    [info] Playing test case label-issue2
    [info] Executing: |label | top | |
    [info] Executing: |gotoIf | "${status}" == "done" | bottom |
    [info] Executing: |log | 'here' | |
    [info] [selbench] here
    [info] Executing: |storeEval | "done" | status |
    [info] script is: "done"
    [info] Executing: |goto | top | |
    [info] [selblocks] branch => @1: [label|top]
    [info] Executing: |label | top | |
    [info] Executing: |gotoIf | "${status}" == "done" | bottom |
    [info] [selblocks] branch => @6: [label|bottom]
    [info] Executing: |label | bottom | |
    [info] Executing: |deleteVars | status | |
    [info] Test case passed
    [info] Playing test case branching01
    [info] Executing: |resetEmitted | | |
    [info] Executing: |emit | "BEFORE" | |
    [info] Executing: |goto | HERE | |
    [info] [selblocks] branch => @5: [label|HERE]
    [info] Executing: |label | HERE | |
    [info] Executing: |gotoIf | true | THERE |
    [info] [selblocks] branch => @8: [label|THERE]
    [info] Executing: |label | THERE | |
    [info] Executing: |skipNext | | |
    [info] [selblocks] branch => @11: [emit|"AFTER"]
    [info] Executing: |emit | "AFTER" | |
    [info] Executing: |assertEmitted | "BEFORE~AFTER" | |
    [info] Test case passed
    [info] Playing test case branching02
    [info] Executing: |expectError | "Target label 'NOWHERE' is not found" | |
    [info] Executing: |goto | NOWHERE | |
    [error] [selblocks] Error @4: [goto|NOWHERE] Target label 'NOWHERE' is not found.
    [warn] [selblocks] __Stack Trace__
    [info] [selbench] The expected error is confirmed : @4: [goto|NOWHERE] Target label 'NOWHERE' is not found.
    [info] Executing: |expectError | "Target label 'NOWHERE' is not found" | |
    [info] Executing: |gotoIf | true | NOWHERE |
    [error] [selblocks] Error @7: [gotoIf|true|NOWHERE] Target label 'NOWHERE' is not found.
    [warn] [selblocks] __Stack Trace__
    [info] [selbench] The expected error is confirmed : @7: [gotoIf|true|NOWHERE] Target label 'NOWHERE' is not found.
    [info] Executing: |expectError | "Requires a number > 1" | |
    [info] Executing: |skipNext | -1 | |
    [error] [selblocks] Error @10: [skipNext|-1] Requires a number > 1
    [warn] [selblocks] __Stack Trace__
    [info] [selbench] The expected error is confirmed : @10: [skipNext|-1] Requires a number > 1
    [info] Executing: |expectError | "random is not defined" | |
    [info] Executing: |skipNext | random | |
    [error] [selblocks] Error While evaluating Javascript expression: random
    [warn] [selblocks] __Stack Trace__
    [info] [selbench] The expected error is confirmed : random is not defined
    [info] Test case passed
    [info] Playing test case if01
    [info] Executing: |resetEmitted | | |
    [info] Executing: |emit | "BEFORE" | |
    [info] Executing: |if | true | |
    [info] Executing: |emit | "truthy" | |
    [info] Executing: |endIf | | |
    [info] Executing: |if | false | |
    [info] [selblocks] branch => @10: [endIf]
    [info] Executing: |endIf | | |
    [info] Executing: |if | true | |
    [info] Executing: |emit | "A" | |
    [info] Executing: |else | | |
    [info] [selblocks] branch => @16: [endIf]
    [info] Executing: |endIf | | |
    [info] Executing: |if | false | |
    [info] [selblocks] branch => @20: [else]
    [info] Executing: |else | | |
    [info] Executing: |emit | "Y" | |
    [info] Executing: |endIf | | |
    [info] Executing: |if | false | |
    [info] [selblocks] branch => @26: [else]
    [info] Executing: |else | | |
    [info] Executing: |if | true | |
    [info] Executing: |emit | "truthF" | |
    [info] Executing: |else | | |
    [info] [selblocks] branch => @31: [endIf]
    [info] Executing: |endIf | | |
    [info] Executing: |endIf | | |
    [info] Executing: |if | "dilbert".isOneOf("dogbert","dilbert","wally") | |
    [info] Executing: |emit | "office mate" | |
    [info] Executing: |endIf | | |
    [info] Executing: |if | "dilbert".isOneOf("ratbert","alice","asok") | |
    [info] [selblocks] branch => @39: [else]
    [info] Executing: |else | | |
    [info] Executing: |emit | "coffee mate" | |
    [info] Executing: |endIf | | |
    [info] Executing: |if | "mordac".isOneOf("bob the dinosaur","garbage man","mordac") | |
    [info] Executing: |emit | "cell mate" | |
    [info] Executing: |else | | |
    [info] [selblocks] branch => @46: [endIf]
    [info] Executing: |endIf | | |
    [info] Executing: |emit | "AFTER" | |
    [info] Executing: |assertEmitted | "BEFORE~truthy~A~Y~truthF~office mate~coffee mate~cell mate~AFTER" | |
    [info] Test case passed
    [info] Playing test case if02
    [info] Executing: |resetEmitted | | |
    [info] Executing: |if | true | |
    [info] Executing: |emit | "if-y" | |
    [info] Executing: |elseIf | true | |
    [info] [selblocks] branch => @7: [endIf]
    [info] Executing: |endIf | | |
    [info] Executing: |if | false | |
    [info] [selblocks] branch => @11: [elseIf|true]
    [info] Executing: |elseIf | true | |
    [info] Executing: |emit | "elseIf-y" | |
    [info] Executing: |endIf | | |
    [info] Executing: |if | false | |
    [info] [selblocks] branch => @17: [elseIf|true]
    [info] Executing: |elseIf | true | |
    [info] Executing: |emit | "elseIf-a1y" | |
    [info] Executing: |elseIf | true | |
    [info] [selblocks] branch => @21: [endIf]
    [info] Executing: |endIf | | |
    [info] Executing: |if | false | |
    [info] [selblocks] branch => @25: [elseIf|false]
    [info] Executing: |elseIf | false | |
    [info] [selblocks] branch => @27: [elseIf|true]
    [info] Executing: |elseIf | true | |
    [info] Executing: |emit | "elseIf-b2y" | |
    [info] Executing: |endIf | | |
    [info] Executing: |if | false | |
    [info] [selblocks] branch => @33: [elseIf|false]
    [info] Executing: |elseIf | false | |
    [info] [selblocks] branch => @35: [else]
    [info] Executing: |else | | |
    [info] Executing: |emit | "else-y" | |
    [info] Executing: |endIf | | |
    [info] Executing: |assertEmitted | "if-y~elseIf-y~elseIf-a1y~elseIf-b2y~else-y" | |
    [info] Test case passed
    [info] Playing test case if03
    [info] Executing: |resetEmitted | | |
    [info] Executing: |foreach | i | 2, 0, 1, 4, 3, 5 |
    [info] Executing: |if | i == 0 | |
    [info] [selblocks] branch => @6: [elseIf|i == 1]
    [info] Executing: |elseIf | i == 1 | |
    [info] [selblocks] branch => @8: [elseIf|i == 2]
    [info] Executing: |elseIf | i == 2 | |
    [info] Executing: |emit | "elseIf-${i}" | |
    [info] Executing: |elseIf | i == 3 | |
    [info] [selblocks] branch => @14: [endIf]
    [info] Executing: |endIf | | |
    [info] Executing: |endForeach | | |
    [info] [selblocks] branch => @3: [foreach|i|2, 0, 1, 4, 3, 5]
    [info] Executing: |foreach | i | 2, 0, 1, 4, 3, 5 |
    [info] Executing: |if | i == 0 | |
    [info] Executing: |emit | "if-${i}" | |
    [info] Executing: |elseIf | i == 1 | |
    [info] [selblocks] branch => @14: [endIf]
    [info] Executing: |endIf | | |
    [info] Executing: |endForeach | | |
    [info] [selblocks] branch => @3: [foreach|i|2, 0, 1, 4, 3, 5]
    [info] Executing: |foreach | i | 2, 0, 1, 4, 3, 5 |
    [info] Executing: |if | i == 0 | |
    [info] [selblocks] branch => @6: [elseIf|i == 1]
    [info] Executing: |elseIf | i == 1 | |
    [info] Executing: |emit | "elseIf-${i}" | |
    [info] Executing: |elseIf | i == 2 | |
    [info] [selblocks] branch => @14: [endIf]
    [info] Executing: |endIf | | |
    [info] Executing: |endForeach | | |
    [info] [selblocks] branch => @3: [foreach|i|2, 0, 1, 4, 3, 5]
    [info] Executing: |foreach | i | 2, 0, 1, 4, 3, 5 |
    [info] Executing: |if | i == 0 | |
    [info] [selblocks] branch => @6: [elseIf|i == 1]
    [info] Executing: |elseIf | i == 1 | |
    [info] [selblocks] branch => @8: [elseIf|i == 2]
    [info] Executing: |elseIf | i == 2 | |
    [info] [selblocks] branch => @10: [elseIf|i == 3]
    [info] Executing: |elseIf | i == 3 | |
    [info] [selblocks] branch => @12: [else]
    [info] Executing: |else | | |
    [info] Executing: |emit | "else-${i}" | |
    [info] Executing: |endIf | | |
    [info] Executing: |endForeach | | |
    [info] [selblocks] branch => @3: [foreach|i|2, 0, 1, 4, 3, 5]
    [info] Executing: |foreach | i | 2, 0, 1, 4, 3, 5 |
    [info] Executing: |if | i == 0 | |
    [info] [selblocks] branch => @6: [elseIf|i == 1]
    [info] Executing: |elseIf | i == 1 | |
    [info] [selblocks] branch => @8: [elseIf|i == 2]
    [info] Executing: |elseIf | i == 2 | |
    [info] [selblocks] branch => @10: [elseIf|i == 3]
    [info] Executing: |elseIf | i == 3 | |
    [info] Executing: |emit | "elseIf-${i}" | |
    [info] Executing: |else | | |
    [info] [selblocks] branch => @14: [endIf]
    [info] Executing: |endIf | | |
    [info] Executing: |endForeach | | |
    [info] [selblocks] branch => @3: [foreach|i|2, 0, 1, 4, 3, 5]
    [info] Executing: |foreach | i | 2, 0, 1, 4, 3, 5 |
    [info] Executing: |if | i == 0 | |
    [info] [selblocks] branch => @6: [elseIf|i == 1]
    [info] Executing: |elseIf | i == 1 | |
    [info] [selblocks] branch => @8: [elseIf|i == 2]
    [info] Executing: |elseIf | i == 2 | |
    [info] [selblocks] branch => @10: [elseIf|i == 3]
    [info] Executing: |elseIf | i == 3 | |
    [info] [selblocks] branch => @12: [else]
    [info] Executing: |else | | |
    [info] Executing: |emit | "else-${i}" | |
    [info] Executing: |endIf | | |
    [info] Executing: |endForeach | | |
    [info] [selblocks] branch => @3: [foreach|i|2, 0, 1, 4, 3, 5]
    [info] Executing: |foreach | i | 2, 0, 1, 4, 3, 5 |
    [info] [selblocks] branch => @15: [endForeach]
    [info] Executing: |endForeach | | |
    [info] Executing: |assertEmitted | "elseIf-2~if-0~elseIf-1~else-4~elseIf-3~else-5" | |
    [info] Test case passed
    [info] Playing test case for
    [info] Executing: |resetEmitted | | |
    [info] Executing: |deleteVars | f | |
    [info] Executing: |emit | "START ${f}" | |
    [info] Executing: |for | s=0,f=3; f <= 5; f++ | |
    [info] Executing: |emit | "iter=${f}.${s}" | |
    [info] Executing: |endFor | | |
    [info] [selblocks] branch => @4: [for|s=0,f=3; f <= 5; f++]
    [info] Executing: |for | s=0,f=3; f <= 5; f++ | |
    [info] Executing: |emit | "iter=${f}.${s}" | |
    [info] Executing: |endFor | | |
    [info] [selblocks] branch => @4: [for|s=0,f=3; f <= 5; f++]
    [info] Executing: |for | s=0,f=3; f <= 5; f++ | |
    [info] Executing: |emit | "iter=${f}.${s}" | |
    [info] Executing: |endFor | | |
    [info] [selblocks] branch => @4: [for|s=0,f=3; f <= 5; f++]
    [info] Executing: |for | s=0,f=3; f <= 5; f++ | |
    [info] [selblocks] branch => @6: [endFor]
    [info] Executing: |endFor | | |
    [info] Executing: |emit | "END ${f}" | |
    [info] Executing: |assertEmitted | "START $" + "{f}~iter=3.0~iter=4.0~iter=5.0~END $" + "{f}" | |
    [info] Test case passed
    [info] Playing test case foreach
    [info] Executing: |resetEmitted | | |
    [info] Executing: |deleteVars | _i, fe | |
    [info] Executing: |emit | "START ${_i}-${fe}" | |
    [info] Executing: |foreach | fe | "dilbert", "dogbert", "wally" |
    [info] Executing: |emit | "${_i}) ${fe}" | |
    [info] Executing: |endForeach | | |
    [info] [selblocks] branch => @4: [foreach|fe|"dilbert", "dogbert", "wally"]
    [info] Executing: |foreach | fe | "dilbert", "dogbert", "wally" |
    [info] Executing: |emit | "${_i}) ${fe}" | |
    [info] Executing: |endForeach | | |
    [info] [selblocks] branch => @4: [foreach|fe|"dilbert", "dogbert", "wally"]
    [info] Executing: |foreach | fe | "dilbert", "dogbert", "wally" |
    [info] Executing: |emit | "${_i}) ${fe}" | |
    [info] Executing: |endForeach | | |
    [info] [selblocks] branch => @4: [foreach|fe|"dilbert", "dogbert", "wally"]
    [info] Executing: |foreach | fe | "dilbert", "dogbert", "wally" |
    [info] [selblocks] branch => @6: [endForeach]
    [info] Executing: |endForeach | | |
    [info] Executing: |emit | "END ${_i}-${fe}" | |
    [info] Executing: |assertEmitted | "START $" + "{_i}-$" + "{fe}~0) dilbert~1) dogbert~2) wally~END $" + "{_i}-$" + "{fe}" | |
    [info] Test case passed
    [info] Playing test case foreach-xpath
    [info] Executing: |resetEmitted | | |
    [info] Executing: |echo | $x("//input") | |
    [info] echo: $x("//input")
    [info] Executing: |echo | $X("//input") | |
    [info] echo: $X("//input")
    [info] Executing: |echo | begin | |
    [info] echo: begin
    [info] Executing: |emit | "START ${_i}) ${link}" | |
    [info] Executing: |foreach | link | $X("//input") |
    [info] Executing: |emit | "${_i}) ${link}" | |
    [info] Executing: |echo | ${link} | |
    [info] echo: [object HTMLInputElement]
    [info] Executing: |endForeach | | |
    [info] [selblocks] branch => @6: [foreach|link|$X("//input")]
    [info] Executing: |foreach | link | $X("//input") |
    [info] Executing: |emit | "${_i}) ${link}" | |
    [info] Executing: |echo | ${link} | |
    [info] echo: [object HTMLInputElement]
    [info] Executing: |endForeach | | |
    [info] [selblocks] branch => @6: [foreach|link|$X("//input")]
    [info] Executing: |foreach | link | $X("//input") |
    [info] Executing: |emit | "${_i}) ${link}" | |
    [info] Executing: |echo | ${link} | |
    [info] echo: [object HTMLInputElement]
    [info] Executing: |endForeach | | |
    [info] [selblocks] branch => @6: [foreach|link|$X("//input")]
    [info] Executing: |foreach | link | $X("//input") |
    [info] [selblocks] branch => @9: [endForeach]
    [info] Executing: |endForeach | | |
    [info] Executing: |emit | "END ${_i}) ${link}" | |
    [info] Executing: |assertEmitted | "START ${" + "_i}) ${" + "link}~0) [object HTMLInputElement]~1) [object HTMLInputElement]~2) [object HTMLInputElement]~END ${" + "_i}) ${" + "link}" | |
    [info] Test case passed
    [info] Playing test case forjson
    [info] Executing: |resetEmitted | | |
    [info] Executing: |deleteVars | jname | |
    [info] Executing: |emit | "START ${jname}" | |
    [info] Executing: |forJson | http://refactoror.net/forjson.json | |
    [info] [selblocks] Reading from: http://refactoror.net/forjson.json
    [info] [selblocks] [ { jname: "dilbert" } ,{ jname: "dogbert" } ,{ jname: "wally" } ]
    [info] Executing: |emit | jname | |
    [info] Executing: |endForJson | | |
    [info] [selblocks] branch => @5: [forJson|http://refactoror.net/forjson.json]
    [info] Executing: |forJson | http://refactoror.net/forjson.json | |
    [info] Executing: |emit | jname | |
    [info] Executing: |endForJson | | |
    [info] [selblocks] branch => @5: [forJson|http://refactoror.net/forjson.json]
    [info] Executing: |forJson | http://refactoror.net/forjson.json | |
    [info] Executing: |emit | jname | |
    [info] Executing: |endForJson | | |
    [info] [selblocks] branch => @5: [forJson|http://refactoror.net/forjson.json]
    [info] Executing: |forJson | http://refactoror.net/forjson.json | |
    [info] [selblocks] branch => @7: [endForJson]
    [info] Executing: |endForJson | | |
    [info] Executing: |emit | "INTERMISSION ${jname}" | |
    [info] Executing: |loadJsonVars | http://refactoror.net/forjson.json | jname == "dogbert" |
    [info] [selblocks] Reading from: http://refactoror.net/forjson.json
    [info] [selblocks] [ { jname: "dilbert" } ,{ jname: "dogbert" } ,{ jname: "wally" } ]
    [info] Executing: |emit | "END ${jname}" | |
    [info] Executing: |assertEmitted | "START $" + "{jname}~dilbert~dogbert~wally~INTERMISSION $" + "{jname}~END dogbert" | |
    [info] Test case passed
    [info] Playing test case loadjsonvars
    [info] Executing: |expectError | "Requires a JSON file path or URL" | |
    [info] Executing: |loadJsonVars | | |
    [error] [selblocks] Error @3: [loadJsonVars] Requires a JSON file path or URL.
    [warn] [selblocks] __Stack Trace__
    [info] [selbench] The expected error is confirmed : @3: [loadJsonVars] Requires a JSON file path or URL.
    [info] Executing: |expectError | "Multiple JSON objects are not valid for this command" | |
    [info] Executing: |loadJsonVars | http://refactoror.net/forjson.json | |
    [info] [selblocks] Reading from: http://refactoror.net/forjson.json
    [info] [selblocks] [ { jname: "dilbert" } ,{ jname: "dogbert" } ,{ jname: "wally" } ]
    [error] [selblocks] Error @6: [loadJsonVars|http://refactoror.net/forjson.json] Multiple JSON objects are not valid for this command. (A specific JSON object can be selected by specifying: name="value".)
    [warn] [selblocks] __Stack Trace__
    [info] [selbench] The expected error is confirmed : @6: [loadJsonVars|http://refactoror.net/forjson.json] Multiple JSON objects are not valid for this command. (A specific JSON object can be selected by specifying: name="value".)
    [info] Executing: |expectError | '"flubber" is not a boolean expression' | |
    [info] Executing: |loadJsonVars | http://refactoror.net/forjson.json | "flubber" |
    [info] [selblocks] Reading from: http://refactoror.net/forjson.json
    [info] [selblocks] [ { jname: "dilbert" } ,{ jname: "dogbert" } ,{ jname: "wally" } ]
    [error] [selblocks] Error @9: [loadJsonVars|http://refactoror.net/forjson.json|"flubber"], "flubber" is not a boolean expression
    [warn] [selblocks] __Stack Trace__
    [info] [selbench] The expected error is confirmed : @9: [loadJsonVars|http://refactoror.net/forjson.json|"flubber"], "flubber" is not a boolean expression
    [info] Test case passed
    [info] Playing test case forxml
    [info] Executing: |resetEmitted | | |
    [info] Executing: |deleteVars | xname | |
    [info] Executing: |emit | "START ${xname}" | |
    [info] Executing: |forXml | http://refactoror.net/forxml.xml | |
    [info] [selblocks] Reading from: http://refactoror.net/forxml.xml
    [info] Executing: |emit | xname | |
    [info] Executing: |endForXml | | |
    [info] [selblocks] branch => @5: [forXml|http://refactoror.net/forxml.xml]
    [info] Executing: |forXml | http://refactoror.net/forxml.xml | |
    [info] Executing: |emit | xname | |
    [info] Executing: |endForXml | | |
    [info] [selblocks] branch => @5: [forXml|http://refactoror.net/forxml.xml]
    [info] Executing: |forXml | http://refactoror.net/forxml.xml | |
    [info] Executing: |emit | xname | |
    [info] Executing: |endForXml | | |
    [info] [selblocks] branch => @5: [forXml|http://refactoror.net/forxml.xml]
    [info] Executing: |forXml | http://refactoror.net/forxml.xml | |
    [info] [selblocks] branch => @7: [endForXml]
    [info] Executing: |endForXml | | |
    [info] Executing: |emit | "INTERMISSION ${xname}" | |
    [info] Executing: |loadXmlVars | http://refactoror.net/forxml.xml | xname == "dogbert" |
    [info] [selblocks] Reading from: http://refactoror.net/forxml.xml
    [info] Executing: |emit | "END ${xname}" | |
    [info] Executing: |assertEmitted | "START $" + "{xname}~dilbert~dogbert~wally~INTERMISSION $" + "{xname}~END dogbert" | |
    [info] Test case passed
    [info] Playing test case loadxmlvars
    [info] Executing: |expectError | "Requires an XML file path or URL" | |
    [info] Executing: |loadXmlVars | | |
    [error] [selblocks] Error @3: [loadXmlVars] Requires an XML file path or URL.
    [warn] [selblocks] __Stack Trace__
    [info] [selbench] The expected error is confirmed : @3: [loadXmlVars] Requires an XML file path or URL.
    [info] Executing: |expectError | "Multiple XML elements are not valid for this command" | |
    [info] Executing: |loadXmlVars | http://refactoror.net/forxml.xml | |
    [info] [selblocks] Reading from: http://refactoror.net/forxml.xml
    [error] [selblocks] Error @6: [loadXmlVars|http://refactoror.net/forxml.xml] Multiple XML elements are not valid for this command. (A specific XML element can be selected by specifying: name="value".)
    [warn] [selblocks] __Stack Trace__
    [info] [selbench] The expected error is confirmed : @6: [loadXmlVars|http://refactoror.net/forxml.xml] Multiple XML elements are not valid for this command. (A specific XML element can be selected by specifying: name="value".)
    [info] Executing: |expectError | '"flubber" is not a boolean expression' | |
    [info] Executing: |loadXmlVars | http://refactoror.net/forxml.xml | "flubber" |
    [info] [selblocks] Reading from: http://refactoror.net/forxml.xml
    [error] [selblocks] Error @9: [loadXmlVars|http://refactoror.net/forxml.xml|"flubber"], "flubber" is not a boolean expression
    [warn] [selblocks] __Stack Trace__
    [info] [selbench] The expected error is confirmed : @9: [loadXmlVars|http://refactoror.net/forxml.xml|"flubber"], "flubber" is not a boolean expression
    [info] Test case passed
    [info] Playing test case continue-break01
    [info] Executing: |resetEmitted | | |
    [info] Executing: |deleteVars | f | |
    [info] Executing: |for | f=3; f <= 9; f++ | |
    [info] Executing: |continue | f == 6 | |
    [info] Executing: |if | f > 6 | |
    [info] [selblocks] branch => @11: [endIf]
    [info] Executing: |endIf | | |
    [info] Executing: |emit | "iter=${f}" | |
    [info] Executing: |endFor | | |
    [info] [selblocks] branch => @3: [for|f=3; f <= 9; f++]
    [info] Executing: |for | f=3; f <= 9; f++ | |
    [info] Executing: |continue | f == 6 | |
    [info] Executing: |if | f > 6 | |
    [info] [selblocks] branch => @11: [endIf]
    [info] Executing: |endIf | | |
    [info] Executing: |emit | "iter=${f}" | |
    [info] Executing: |endFor | | |
    [info] [selblocks] branch => @3: [for|f=3; f <= 9; f++]
    [info] Executing: |for | f=3; f <= 9; f++ | |
    [info] Executing: |continue | f == 6 | |
    [info] Executing: |if | f > 6 | |
    [info] [selblocks] branch => @11: [endIf]
    [info] Executing: |endIf | | |
    [info] Executing: |emit | "iter=${f}" | |
    [info] Executing: |endFor | | |
    [info] [selblocks] branch => @3: [for|f=3; f <= 9; f++]
    [info] Executing: |for | f=3; f <= 9; f++ | |
    [info] Executing: |continue | f == 6 | |
    [info] [selblocks] branch => @3: [for|f=3; f <= 9; f++]
    [info] Executing: |for | f=3; f <= 9; f++ | |
    [info] Executing: |continue | f == 6 | |
    [info] Executing: |if | f > 6 | |
    [info] Executing: |if | f == 7 | |
    [info] Executing: |continue | | |
    [info] [selblocks] branch => @3: [for|f=3; f <= 9; f++]
    [info] Executing: |for | f=3; f <= 9; f++ | |
    [info] Executing: |continue | f == 6 | |
    [info] Executing: |if | f > 6 | |
    [info] Executing: |if | f == 7 | |
    [info] [selblocks] branch => @8: [else]
    [info] Executing: |else | | |
    [info] Executing: |break | | |
    [info] [selblocks] branch => @13: [endFor]
    [info] Executing: |endFor | | |
    [info] Executing: |assertEmitted | "iter=3~iter=4~iter=5" | |
    [info] Test case passed
    [info] Playing test case continue-break02
    [info] Executing: |resetEmitted | | |
    [info] Executing: |store | 0 | i |
    [info] Executing: |while | i++ < 10 | |
    [info] Executing: |continue | i==3 | |
    [info] Executing: |break | i==5 | |
    [info] Executing: |emit | "iter=${i}" | |
    [info] Executing: |endWhile | | |
    [info] [selblocks] branch => @3: [while|i++ < 10]
    [info] Executing: |while | i++ < 10 | |
    [info] Executing: |continue | i==3 | |
    [info] Executing: |break | i==5 | |
    [info] Executing: |emit | "iter=${i}" | |
    [info] Executing: |endWhile | | |
    [info] [selblocks] branch => @3: [while|i++ < 10]
    [info] Executing: |while | i++ < 10 | |
    [info] Executing: |continue | i==3 | |
    [info] [selblocks] branch => @3: [while|i++ < 10]
    [info] Executing: |while | i++ < 10 | |
    [info] Executing: |continue | i==3 | |
    [info] Executing: |break | i==5 | |
    [info] Executing: |emit | "iter=${i}" | |
    [info] Executing: |endWhile | | |
    [info] [selblocks] branch => @3: [while|i++ < 10]
    [info] Executing: |while | i++ < 10 | |
    [info] Executing: |continue | i==3 | |
    [info] Executing: |break | i==5 | |
    [info] [selblocks] branch => @7: [endWhile]
    [info] Executing: |endWhile | | |
    [info] Executing: |assertEmitted | "iter=1~iter=2~iter=4" | |
    [info] Test case passed
    [info] Playing test case continue-break03
    [info] Executing: |resetEmitted | | |
    [info] Executing: |foreach | fe | "dilbert","dogbert","wally" |
    [info] Executing: |continue | fe=="dogbert" | |
    [info] Executing: |break | fe=="wally" | |
    [info] Executing: |emit | "iter=${fe}" | |
    [info] Executing: |endForeach | | |
    [info] [selblocks] branch => @2: [foreach|fe|"dilbert","dogbert","wally"]
    [info] Executing: |foreach | fe | "dilbert","dogbert","wally" |
    [info] Executing: |continue | fe=="dogbert" | |
    [info] [selblocks] branch => @2: [foreach|fe|"dilbert","dogbert","wally"]
    [info] Executing: |foreach | fe | "dilbert","dogbert","wally" |
    [info] Executing: |continue | fe=="dogbert" | |
    [info] Executing: |break | fe=="wally" | |
    [info] [selblocks] branch => @6: [endForeach]
    [info] Executing: |endForeach | | |
    [info] Executing: |assertEmitted | "iter=dilbert" | |
    [info] Test case passed
    [info] Playing test case continue-break04
    [info] Executing: |resetEmitted | | |
    [info] Executing: |forXml | http://refactoror.net/forxml.xml | |
    [info] [selblocks] Reading from: http://refactoror.net/forxml.xml
    [info] Executing: |continue | xname=="dogbert" | |
    [info] Executing: |break | xname=="wally" | |
    [info] Executing: |emit | "iter=${xname}" | |
    [info] Executing: |endForXml | | |
    [info] [selblocks] branch => @2: [forXml|http://refactoror.net/forxml.xml]
    [info] Executing: |forXml | http://refactoror.net/forxml.xml | |
    [info] Executing: |continue | xname=="dogbert" | |
    [info] [selblocks] branch => @2: [forXml|http://refactoror.net/forxml.xml]
    [info] Executing: |forXml | http://refactoror.net/forxml.xml | |
    [info] Executing: |continue | xname=="dogbert" | |
    [info] Executing: |break | xname=="wally" | |
    [info] [selblocks] branch => @6: [endForXml]
    [info] Executing: |endForXml | | |
    [info] Executing: |assertEmitted | "iter=dilbert" | |
    [info] Executing: |resetEmitted | | |
    [info] Test case passed
    [info] Playing test case nested-loops
    [info] Executing: |resetEmitted | | |
    [info] Executing: |deleteVars | i, n, uname | |
    [info] Executing: |startTimer | | |
    [info] Executing: |store | 2 | i |
    [info] Executing: |emit | "START ${i}" | |
    [info] Executing: |while | i > 0 | |
    [info] Executing: |emit | "while=${i}" | |
    [info] Executing: |foreach | uname | "dilbert", "dogbert" |
    [info] Executing: |emit | "foreach=${uname}" | |
    [info] Executing: |for | n = 2; n <=3; n++ | |
    [info] Executing: |emit | "FOR=${n}" | |
    [info] Executing: |for | n = 7; n <= 8; n++ | |
    [info] Executing: |emit | "for=${n}" | |
    [info] Executing: |endFor | | |
    [info] [selblocks] branch => @12: [for|n = 7; n <= 8; n++]
    [info] Executing: |for | n = 7; n <= 8; n++ | |
    [info] Executing: |emit | "for=${n}" | |
    [info] Executing: |endFor | | |
    [info] [selblocks] branch => @12: [for|n = 7; n <= 8; n++]
    [info] Executing: |for | n = 7; n <= 8; n++ | |
    [info] [selblocks] branch => @14: [endFor]
    [info] Executing: |endFor | | |
    [info] Executing: |endFor | | |
    [info] [selblocks] branch => @10: [for|n = 2; n <=3; n++]
    [info] Executing: |for | n = 2; n <=3; n++ | |
    [info] Executing: |emit | "FOR=${n}" | |
    [info] Executing: |for | n = 7; n <= 8; n++ | |
    [info] Executing: |emit | "for=${n}" | |
    [info] Executing: |endFor | | |
    [info] [selblocks] branch => @12: [for|n = 7; n <= 8; n++]
    [info] Executing: |for | n = 7; n <= 8; n++ | |
    [info] Executing: |emit | "for=${n}" | |
    [info] Executing: |endFor | | |
    [info] [selblocks] branch => @12: [for|n = 7; n <= 8; n++]
    [info] Executing: |for | n = 7; n <= 8; n++ | |
    [info] [selblocks] branch => @14: [endFor]
    [info] Executing: |endFor | | |
    [info] Executing: |endFor | | |
    [info] [selblocks] branch => @10: [for|n = 2; n <=3; n++]
    [info] Executing: |for | n = 2; n <=3; n++ | |
    [info] [selblocks] branch => @15: [endFor]
    [info] Executing: |endFor | | |
    [info] Executing: |emit | "endFor ${n}" | |
    [info] Executing: |endForeach | | |
    [info] [selblocks] branch => @8: [foreach|uname|"dilbert", "dogbert"]
    [info] Executing: |foreach | uname | "dilbert", "dogbert" |
    [info] Executing: |emit | "foreach=${uname}" | |
    [info] Executing: |for | n = 2; n <=3; n++ | |
    [info] Executing: |emit | "FOR=${n}" | |
    [info] Executing: |for | n = 7; n <= 8; n++ | |
    [info] Executing: |emit | "for=${n}" | |
    [info] Executing: |endFor | | |
    [info] [selblocks] branch => @12: [for|n = 7; n <= 8; n++]
    [info] Executing: |for | n = 7; n <= 8; n++ | |
    [info] Executing: |emit | "for=${n}" | |
    [info] Executing: |endFor | | |
    [info] [selblocks] branch => @12: [for|n = 7; n <= 8; n++]
    [info] Executing: |for | n = 7; n <= 8; n++ | |
    [info] [selblocks] branch => @14: [endFor]
    [info] Executing: |endFor | | |
    [info] Executing: |endFor | | |
    [info] [selblocks] branch => @10: [for|n = 2; n <=3; n++]
    [info] Executing: |for | n = 2; n <=3; n++ | |
    [info] Executing: |emit | "FOR=${n}" | |
    [info] Executing: |for | n = 7; n <= 8; n++ | |
    [info] Executing: |emit | "for=${n}" | |
    [info] Executing: |endFor | | |
    [info] [selblocks] branch => @12: [for|n = 7; n <= 8; n++]
    [info] Executing: |for | n = 7; n <= 8; n++ | |
    [info] Executing: |emit | "for=${n}" | |
    [info] Executing: |endFor | | |
    [info] [selblocks] branch => @12: [for|n = 7; n <= 8; n++]
    [info] Executing: |for | n = 7; n <= 8; n++ | |
    [info] [selblocks] branch => @14: [endFor]
    [info] Executing: |endFor | | |
    [info] Executing: |endFor | | |
    [info] [selblocks] branch => @10: [for|n = 2; n <=3; n++]
    [info] Executing: |for | n = 2; n <=3; n++ | |
    [info] [selblocks] branch => @15: [endFor]
    [info] Executing: |endFor | | |
    [info] Executing: |emit | "endFor ${n}" | |
    [info] Executing: |endForeach | | |
    [info] [selblocks] branch => @8: [foreach|uname|"dilbert", "dogbert"]
    [info] Executing: |foreach | uname | "dilbert", "dogbert" |
    [info] [selblocks] branch => @17: [endForeach]
    [info] Executing: |endForeach | | |
    [info] Executing: |storeEval | ${i}-1 | i |
    [info] script is: 2-1
    [info] Executing: |endWhile | | |
    [info] [selblocks] branch => @6: [while|i > 0]
    [info] Executing: |while | i > 0 | |
    [info] Executing: |emit | "while=${i}" | |
    [info] Executing: |foreach | uname | "dilbert", "dogbert" |
    [info] Executing: |emit | "foreach=${uname}" | |
    [info] Executing: |for | n = 2; n <=3; n++ | |
    [info] Executing: |emit | "FOR=${n}" | |
    [info] Executing: |for | n = 7; n <= 8; n++ | |
    [info] Executing: |emit | "for=${n}" | |
    [info] Executing: |endFor | | |
    [info] [selblocks] branch => @12: [for|n = 7; n <= 8; n++]
    [info] Executing: |for | n = 7; n <= 8; n++ | |
    [info] Executing: |emit | "for=${n}" | |
    [info] Executing: |endFor | | |
    [info] [selblocks] branch => @12: [for|n = 7; n <= 8; n++]
    [info] Executing: |for | n = 7; n <= 8; n++ | |
    [info] [selblocks] branch => @14: [endFor]
    [info] Executing: |endFor | | |
    [info] Executing: |endFor | | |
    [info] [selblocks] branch => @10: [for|n = 2; n <=3; n++]
    [info] Executing: |for | n = 2; n <=3; n++ | |
    [info] Executing: |emit | "FOR=${n}" | |
    [info] Executing: |for | n = 7; n <= 8; n++ | |
    [info] Executing: |emit | "for=${n}" | |
    [info] Executing: |endFor | | |
    [info] [selblocks] branch => @12: [for|n = 7; n <= 8; n++]
    [info] Executing: |for | n = 7; n <= 8; n++ | |
    [info] Executing: |emit | "for=${n}" | |
    [info] Executing: |endFor | | |
    [info] [selblocks] branch => @12: [for|n = 7; n <= 8; n++]
    [info] Executing: |for | n = 7; n <= 8; n++ | |
    [info] [selblocks] branch => @14: [endFor]
    [info] Executing: |endFor | | |
    [info] Executing: |endFor | | |
    [info] [selblocks] branch => @10: [for|n = 2; n <=3; n++]
    [info] Executing: |for | n = 2; n <=3; n++ | |
    [info] [selblocks] branch => @15: [endFor]
    [info] Executing: |endFor | | |
    [info] Executing: |emit | "endFor ${n}" | |
    [info] Executing: |endForeach | | |
    [info] [selblocks] branch => @8: [foreach|uname|"dilbert", "dogbert"]
    [info] Executing: |foreach | uname | "dilbert", "dogbert" |
    [info] Executing: |emit | "foreach=${uname}" | |
    [info] Executing: |for | n = 2; n <=3; n++ | |
    [info] Executing: |emit | "FOR=${n}" | |
    [info] Executing: |for | n = 7; n <= 8; n++ | |
    [info] Executing: |emit | "for=${n}" | |
    [info] Executing: |endFor | | |
    [info] [selblocks] branch => @12: [for|n = 7; n <= 8; n++]
    [info] Executing: |for | n = 7; n <= 8; n++ | |
    [info] Executing: |emit | "for=${n}" | |
    [info] Executing: |endFor | | |
    [info] [selblocks] branch => @12: [for|n = 7; n <= 8; n++]
    [info] Executing: |for | n = 7; n <= 8; n++ | |
    [info] [selblocks] branch => @14: [endFor]
    [info] Executing: |endFor | | |
    [info] Executing: |endFor | | |
    [info] [selblocks] branch => @10: [for|n = 2; n <=3; n++]
    [info] Executing: |for | n = 2; n <=3; n++ | |
    [info] Executing: |emit | "FOR=${n}" | |
    [info] Executing: |for | n = 7; n <= 8; n++ | |
    [info] Executing: |emit | "for=${n}" | |
    [info] Executing: |endFor | | |
    [info] [selblocks] branch => @12: [for|n = 7; n <= 8; n++]
    [info] Executing: |for | n = 7; n <= 8; n++ | |
    [info] Executing: |emit | "for=${n}" | |
    [info] Executing: |endFor | | |
    [info] [selblocks] branch => @12: [for|n = 7; n <= 8; n++]
    [info] Executing: |for | n = 7; n <= 8; n++ | |
    [info] [selblocks] branch => @14: [endFor]
    [info] Executing: |endFor | | |
    [info] Executing: |endFor | | |
    [info] [selblocks] branch => @10: [for|n = 2; n <=3; n++]
    [info] Executing: |for | n = 2; n <=3; n++ | |
    [info] [selblocks] branch => @15: [endFor]
    [info] Executing: |endFor | | |
    [info] Executing: |emit | "endFor ${n}" | |
    [info] Executing: |endForeach | | |
    [info] [selblocks] branch => @8: [foreach|uname|"dilbert", "dogbert"]
    [info] Executing: |foreach | uname | "dilbert", "dogbert" |
    [info] [selblocks] branch => @17: [endForeach]
    [info] Executing: |endForeach | | |
    [info] Executing: |storeEval | ${i}-1 | i |
    [info] script is: 1-1
    [info] Executing: |endWhile | | |
    [info] [selblocks] branch => @6: [while|i > 0]
    [info] Executing: |while | i > 0 | |
    [info] [selblocks] branch => @19: [endWhile]
    [info] Executing: |endWhile | | |
    [info] Executing: |emit | "END ${i}" | |
    [info] Executing: |timerElapsed | | |
    [info] [selbench] 2.155 sec elapsed:
    [info] Executing: |assertEmitted | "START 2~while=2~foreach=dilbert~FOR=2~for=7~for=8~FOR=3~for=7~for=8~endFor ${n}~foreach=dogbert~FOR=2~for=7~for=8~FOR=3~for=7~for=8~endFor ${n}~while=1~foreach=dilbert~FOR=2~for=7~for=8~FOR=3~for=7~for=8~endFor ${n}~foreach=dogbert~FOR=2~for=7~for=8~FOR=3~for=7~for=8~endFor ${n}~END 0" | |
    [info] Test case passed
    [info] Playing test case function01
    [info] Executing: |resetEmitted | | |
    [info] Executing: |deleteVars | sname, srole | |
    [info] Executing: |emit | "START ${sname} ${srole}" | |
    [info] Executing: |call | doSomething | sname = "dilbert,Q", srole = "goof" |
    [info] [selblocks] branch => @7: [function|doSomething|sname]
    [info] Executing: |function | doSomething | sname |
    [info] Executing: |emit | "sname=${sname},srole=${srole}" | |
    [info] Executing: |endFunction | doSomething | |
    [info] [selblocks] branch => @5: [call|doSomething|sname = "dilbert,Q", srole = "goof"]
    [info] Executing: |call | doSomething | sname = "dilbert,Q", srole = "goof" |
    [info] Executing: |function | doSomething | sname |
    [info] [selblocks] branch => @9: [endFunction|doSomething]
    [info] Executing: |endFunction | doSomething | |
    [info] Executing: |call | doSomething | sname = "dogbert", srole = "woof" |
    [info] [selblocks] branch => @7: [function|doSomething|sname]
    [info] Executing: |function | doSomething | sname |
    [info] Executing: |emit | "sname=${sname},srole=${srole}" | |
    [info] Executing: |endFunction | doSomething | |
    [info] [selblocks] branch => @11: [call|doSomething|sname = "dogbert", srole = "woof"]
    [info] Executing: |call | doSomething | sname = "dogbert", srole = "woof" |
    [info] Executing: |call | doSomething | sname = "ratbert", srole = "squeak" |
    [info] [selblocks] branch => @7: [function|doSomething|sname]
    [info] Executing: |function | doSomething | sname |
    [info] Executing: |emit | "sname=${sname},srole=${srole}" | |
    [info] Executing: |endFunction | doSomething | |
    [info] [selblocks] branch => @12: [call|doSomething|sname = "ratbert", srole = "squeak"]
    [info] Executing: |call | doSomething | sname = "ratbert", srole = "squeak" |
    [info] Executing: |foreach | sname | "asok", "alice" |
    [info] Executing: |call | doSomething | sname = sname, srole = "super=user" |
    [info] [selblocks] branch => @7: [function|doSomething|sname]
    [info] Executing: |function | doSomething | sname |
    [info] Executing: |emit | "sname=${sname},srole=${srole}" | |
    [info] Executing: |endFunction | doSomething | |
    [info] [selblocks] branch => @15: [call|doSomething|sname = sname, srole = "super=user"]
    [info] Executing: |call | doSomething | sname = sname, srole = "super=user" |
    [info] Executing: |endForeach | | |
    [info] [selblocks] branch => @14: [foreach|sname|"asok", "alice"]
    [info] Executing: |foreach | sname | "asok", "alice" |
    [info] Executing: |call | doSomething | sname = sname, srole = "super=user" |
    [info] [selblocks] branch => @7: [function|doSomething|sname]
    [info] Executing: |function | doSomething | sname |
    [info] Executing: |emit | "sname=${sname},srole=${srole}" | |
    [info] Executing: |endFunction | doSomething | |
    [info] [selblocks] branch => @15: [call|doSomething|sname = sname, srole = "super=user"]
    [info] Executing: |call | doSomething | sname = sname, srole = "super=user" |
    [info] Executing: |endForeach | | |
    [info] [selblocks] branch => @14: [foreach|sname|"asok", "alice"]
    [info] Executing: |foreach | sname | "asok", "alice" |
    [info] [selblocks] branch => @16: [endForeach]
    [info] Executing: |endForeach | | |
    [info] Executing: |emit | "DONE ${sname} ${srole}" | |
    [info] Executing: |assertEmitted | "START $" + "{sname} $" + "{srole}~sname=dilbert,Q,srole=goof~sname=dogbert,srole=woof~sname=ratbert,srole=squeak~sname=asok,srole=super=user~sname=alice,srole=super=user~DONE $" + "{sname} $" + "{srole}" | |
    [info] Test case passed
    [info] Playing test case function02
    [info] Executing: |expectError | "Function does not exist: NONEXISTENT" | |
    [info] Executing: |call | NONEXISTENT | |
    [error] [selblocks] Error @3: [call|NONEXISTENT] Function does not exist: NONEXISTENT.
    [warn] [selblocks] __Stack Trace__
    [info] [selbench] The expected error is confirmed : @3: [call|NONEXISTENT] Function does not exist: NONEXISTENT.
    [info] Executing: |resetEmitted | | |
    [info] Executing: |script | doDeprecated | sname |
    [warn] [selblocks] The script command has been deprecated as of SelBlocks 2.0 and will be removed in future releases. Please use function instead.
    [info] [selblocks] branch => @8: [endScript|doDeprecated]
    [info] Executing: |endScript | doDeprecated | |
    [info] Executing: |call | doDeprecated | sname = "wally", srole = "lazy" |
    [info] [selblocks] branch => @6: [script|doDeprecated|sname]
    [info] Executing: |script | doDeprecated | sname |
    [warn] [selblocks] The script command has been deprecated as of SelBlocks 2.0 and will be removed in future releases. Please use function instead.
    [info] Executing: |emit | "sname=${sname},srole=${srole}" | |
    [info] Executing: |endScript | doDeprecated | |
    [info] [selblocks] branch => @9: [call|doDeprecated|sname = "wally", srole = "lazy"]
    [info] Executing: |call | doDeprecated | sname = "wally", srole = "lazy" |
    [info] Executing: |assertEmitted | "sname=wally,srole=lazy" | |
    [info] Test case passed
    [info] Playing test case function03-recursive
    [info] Executing: |resetEmitted | | |
    [info] Executing: |deleteVars | degree, n, _result, ud | |
    [info] Executing: |store | 7 | degree |
    [info] Executing: |startTimer | | factorial ${degree} |
    [info] Executing: |call | fac | n=degree |
    [info] [selblocks] branch => @10: [function|fac|n]
    [info] Executing: |function | fac | n |
    [info] Executing: |if | n <= 1 | |
    [info] [selblocks] branch => @13: [else]
    [info] Executing: |else | | |
    [info] Executing: |call | fac | n = n-1 |
    [info] [selblocks] branch => @10: [function|fac|n]
    [info] Executing: |function | fac | n |
    [info] Executing: |if | n <= 1 | |
    [info] [selblocks] branch => @13: [else]
    [info] Executing: |else | | |
    [info] Executing: |call | fac | n = n-1 |
    [info] [selblocks] branch => @10: [function|fac|n]
    [info] Executing: |function | fac | n |
    [info] Executing: |if | n <= 1 | |
    [info] [selblocks] branch => @13: [else]
    [info] Executing: |else | | |
    [info] Executing: |call | fac | n = n-1 |
    [info] [selblocks] branch => @10: [function|fac|n]
    [info] Executing: |function | fac | n |
    [info] Executing: |if | n <= 1 | |
    [info] [selblocks] branch => @13: [else]
    [info] Executing: |else | | |
    [info] Executing: |call | fac | n = n-1 |
    [info] [selblocks] branch => @10: [function|fac|n]
    [info] Executing: |function | fac | n |
    [info] Executing: |if | n <= 1 | |
    [info] [selblocks] branch => @13: [else]
    [info] Executing: |else | | |
    [info] Executing: |call | fac | n = n-1 |
    [info] [selblocks] branch => @10: [function|fac|n]
    [info] Executing: |function | fac | n |
    [info] Executing: |if | n <= 1 | |
    [info] [selblocks] branch => @13: [else]
    [info] Executing: |else | | |
    [info] Executing: |call | fac | n = n-1 |
    [info] [selblocks] branch => @10: [function|fac|n]
    [info] Executing: |function | fac | n |
    [info] Executing: |if | n <= 1 | |
    [info] Executing: |return | 1 | |
    [info] [selblocks] branch => @14: [call|fac|n = n-1]
    [info] Executing: |call | fac | n = n-1 |
    [info] Executing: |emit | _result | |
    [info] Executing: |return | n * _result | |
    [info] [selblocks] branch => @14: [call|fac|n = n-1]
    [info] Executing: |call | fac | n = n-1 |
    [info] Executing: |emit | _result | |
    [info] Executing: |return | n * _result | |
    [info] [selblocks] branch => @14: [call|fac|n = n-1]
    [info] Executing: |call | fac | n = n-1 |
    [info] Executing: |emit | _result | |
    [info] Executing: |return | n * _result | |
    [info] [selblocks] branch => @14: [call|fac|n = n-1]
    [info] Executing: |call | fac | n = n-1 |
    [info] Executing: |emit | _result | |
    [info] Executing: |return | n * _result | |
    [info] [selblocks] branch => @14: [call|fac|n = n-1]
    [info] Executing: |call | fac | n = n-1 |
    [info] Executing: |emit | _result | |
    [info] Executing: |return | n * _result | |
    [info] [selblocks] branch => @14: [call|fac|n = n-1]
    [info] Executing: |call | fac | n = n-1 |
    [info] Executing: |emit | _result | |
    [info] Executing: |return | n * _result | |
    [info] [selblocks] branch => @5: [call|fac|n=degree]
    [info] Executing: |call | fac | n=degree |
    [info] Executing: |timerElapsed | | |
    [info] [selbench] 0.827 sec elapsed: factorial 7
    [info] Executing: |emit | degree + "!=" + _result | |
    [info] Executing: |function | fac | n |
    [info] [selblocks] branch => @18: [endFunction]
    [info] Executing: |endFunction | | |
    [info] Executing: |function | uno | |
    [info] [selblocks] branch => @27: [endFunction|uno]
    [info] Executing: |endFunction | uno | |
    [info] Executing: |function | due | |
    [info] [selblocks] branch => @35: [endFunction|due]
    [info] Executing: |endFunction | due | |
    [info] Executing: |store | 5 | ud |
    [info] Executing: |call | uno | |
    [info] [selblocks] branch => @21: [function|uno]
    [info] Executing: |function | uno | |
    [info] Executing: |emit | "UNO" | |
    [info] Executing: |storeEval | ${ud}-1 | ud |
    [info] script is: 5-1
    [info] Executing: |if | ud > 0 | |
    [info] Executing: |call | due | |
    [info] [selblocks] branch => @29: [function|due]
    [info] Executing: |function | due | |
    [info] Executing: |emit | "DUE" | |
    [info] Executing: |storeEval | ${ud}-1 | ud |
    [info] script is: 4-1
    [info] Executing: |if | ud > 0 | |
    [info] Executing: |call | uno | |
    [info] [selblocks] branch => @21: [function|uno]
    [info] Executing: |function | uno | |
    [info] Executing: |emit | "UNO" | |
    [info] Executing: |storeEval | ${ud}-1 | ud |
    [info] script is: 3-1
    [info] Executing: |if | ud > 0 | |
    [info] Executing: |call | due | |
    [info] [selblocks] branch => @29: [function|due]
    [info] Executing: |function | due | |
    [info] Executing: |emit | "DUE" | |
    [info] Executing: |storeEval | ${ud}-1 | ud |
    [info] script is: 2-1
    [info] Executing: |if | ud > 0 | |
    [info] Executing: |call | uno | |
    [info] [selblocks] branch => @21: [function|uno]
    [info] Executing: |function | uno | |
    [info] Executing: |emit | "UNO" | |
    [info] Executing: |storeEval | ${ud}-1 | ud |
    [info] script is: 1-1
    [info] Executing: |if | ud > 0 | |
    [info] [selblocks] branch => @26: [endIf]
    [info] Executing: |endIf | | |
    [info] Executing: |endFunction | uno | |
    [info] [selblocks] branch => @33: [call|uno]
    [info] Executing: |call | uno | |
    [info] Executing: |endIf | | |
    [info] Executing: |endFunction | due | |
    [info] [selblocks] branch => @25: [call|due]
    [info] Executing: |call | due | |
    [info] Executing: |endIf | | |
    [info] Executing: |endFunction | uno | |
    [info] [selblocks] branch => @33: [call|uno]
    [info] Executing: |call | uno | |
    [info] Executing: |endIf | | |
    [info] Executing: |endFunction | due | |
    [info] [selblocks] branch => @25: [call|due]
    [info] Executing: |call | due | |
    [info] Executing: |endIf | | |
    [info] Executing: |endFunction | uno | |
    [info] [selblocks] branch => @38: [call|uno]
    [info] Executing: |call | uno | |
    [info] Executing: |assertEmitted | "1~2~6~24~120~720~7!=5040~UNO~DUE~UNO~DUE~UNO" | |
    [info] Test case passed
    [info] Playing test case function04-issue2
    [info] Executing: |function | xyz | |
    [info] [selblocks] branch => @3: [endFunction]
    [info] Executing: |endFunction | | |
    [info] Executing: |call | xyz | |
    [info] [selblocks] branch => @1: [function|xyz]
    [info] Executing: |function | xyz | |
    [info] Executing: |log | 'here' | |
    [info] [selbench] here
    [info] Executing: |endFunction | | |
    [info] [selblocks] branch => @4: [call|xyz]
    [info] Executing: |call | xyz | |
    [info] Test case passed
    [info] Playing test case function05-scoping-issue5
    [info] Executing: |store | 'void' | variable |
    [info] Executing: |call | outer | variable='Hello' |
    [info] [selblocks] branch => @3: [function|outer|variable]
    [info] Executing: |function | outer | variable |
    [info] Executing: |call | inner | |
    [info] [selblocks] branch => @8: [function|inner]
    [info] Executing: |function | inner | |
    [info] Executing: |log | "variable=" + variable | |
    [info] [selbench] variable=Hello
    [info] Executing: |store | 'bye bye' | variable |
    [info] Executing: |endFunction | | |
    [info] [selblocks] branch => @4: [call|inner]
    [info] Executing: |call | inner | |
    [info] Executing: |log | "after variable=" + variable | |
    [info] [selbench] after variable='bye bye'
    [info] Executing: |endFunction | | |
    [info] [selblocks] branch => @2: [call|outer|variable='Hello']
    [info] Executing: |call | outer | variable='Hello' |
    [info] Executing: |function | outer | variable |
    [info] [selblocks] branch => @6: [endFunction]
    [info] Executing: |endFunction | | |
    [info] Executing: |function | inner | |
    [info] [selblocks] branch => @11: [endFunction]
    [info] Executing: |endFunction | | |
    [info] Executing: |log | "done variable=" + variable | |
    [info] [selbench] done variable='void'
    [info] Test case passed
    [info] Playing test case exitTest01
    [info] Executing: |resetEmitted | | |
    [info] Executing: |exitTest | | |
    [info] Test case passed
    [info] Playing test case exitTest02 - from within a loop
    [info] [selblocks] TEST HALTED
    [info] Executing: |for | i=0; i < 5; i++ | |
    [info] Executing: |if | i == 3 | |
    [info] [selblocks] branch => @5: [endIf]
    [info] Executing: |endIf | | |
    [info] Executing: |endFor | | |
    [info] [selblocks] branch => @2: [for|i=0; i < 5; i++]
    [info] Executing: |for | i=0; i < 5; i++ | |
    [info] Executing: |if | i == 3 | |
    [info] [selblocks] branch => @5: [endIf]
    [info] Executing: |endIf | | |
    [info] Executing: |endFor | | |
    [info] [selblocks] branch => @2: [for|i=0; i < 5; i++]
    [info] Executing: |for | i=0; i < 5; i++ | |
    [info] Executing: |if | i == 3 | |
    [info] [selblocks] branch => @5: [endIf]
    [info] Executing: |endIf | | |
    [info] Executing: |endFor | | |
    [info] [selblocks] branch => @2: [for|i=0; i < 5; i++]
    [info] Executing: |for | i=0; i < 5; i++ | |
    [info] Executing: |if | i == 3 | |
    [info] Executing: |exitTest | | |
    [info] Test case passed
    [info] Playing test case exitTest03 - from within a function
    [info] [selblocks] TEST HALTED
    [info] Executing: |call | doSubExit | |
    [info] [selblocks] branch => @4: [function|doSubExit]
    [info] Executing: |function | doSubExit | |
    [info] Executing: |exitTest | | |
    [info] Test case passed
    [info] Playing test case try01 - no-op try
    [info] [selblocks] TEST HALTED
    [info] Executing: |log | "-- no-op try --" | |
    [info] [selbench] -- no-op try --
    [info] Executing: |resetEmitted | | |
    [info] Executing: |emit | "([/" | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | -1 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |try | t-noop | |
    [warn] [selblocks] @6: [try|t-noop] does not have a catch-block nor a finally-block, and therefore serves no purpose
    [info] Executing: |emit | "trying" | |
    [info] Executing: |endTry | t-noop | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | -1 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |emit | "/])" | |
    [info] Executing: |assertEmitted | "([/~trying~/])" | |
    [info] Test case passed
    [info] Playing test case try02 - try-finally, w-no error
    [info] Executing: |log | "-- try/finally, w/no error --" | |
    [info] [selbench] -- try/finally, w/no error --
    [info] Executing: |resetEmitted | | |
    [info] Executing: |emit | "([/" | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | -1 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |try | t-fin | |
    [info] Executing: |emit | "trying" | |
    [info] Executing: |finally | | |
    [info] Executing: |emit | "finally" | |
    [info] Executing: |endTry | | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | -1 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |emit | "/])" | |
    [info] Executing: |assertEmitted | "([/~trying~finally~/])" | |
    [info] Test case passed
    [info] Playing test case try03 - try-catch, but no error
    [info] Executing: |log | "-- try/catch, but no error --" | |
    [info] [selbench] -- try/catch, but no error --
    [info] Executing: |resetEmitted | | |
    [info] Executing: |emit | "([/" | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | -1 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |try | tc0 | |
    [info] Executing: |emit | "trying" | |
    [info] Executing: |catch | | |
    [info] [selblocks] branch => @10: [endTry]
    [info] Executing: |endTry | | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | -1 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |emit | "/])" | |
    [info] Executing: |assertEmitted | "([/~trying~/])" | |
    [info] Test case passed
    [info] Playing test case try04 - catch specific error
    [info] Executing: |log | "-- catch specific error --" | |
    [info] [selbench] -- catch specific error --
    [info] Executing: |resetEmitted | | |
    [info] Executing: |emit | "([/" | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | -1 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |try | tc1 | |
    [info] Executing: |throw | "blamo catch ALL" | |
    [info] [selblocks] @7, error has been caught ::
    [info] [selblocks] branch => @9: [catch]
    [info] Executing: |catch | | |
    [info] Executing: |emit | "caught '" + _error.message + "'" | |
    [info] Executing: |endTry | | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | -1 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |emit | "/])" | |
    [info] Executing: |assertEmitted | "([/~caught 'blamo catch ALL'~/])" | |
    [info] Test case passed
    [info] Playing test case try05 - catch specific error, then finally
    [info] Executing: |log | "-- catch specific error, then finally --" | |
    [info] [selbench] -- catch specific error, then finally --
    [info] Executing: |resetEmitted | | |
    [info] Executing: |emit | "([/" | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | -1 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |try | t-spec-outer | |
    [warn] [selblocks] @6: [try|t-spec-outer] does not have a catch-block nor a finally-block, and therefore serves no purpose
    [info] Executing: |emit | "trying outer" | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | -1 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |emit | "([/" | |
    [info] Executing: |try | t-spec-inner | |
    [info] Executing: |emit | "trying inner" | |
    [info] Executing: |throw | "blamo inner" | |
    [info] [selblocks] @13, error has been caught :: /blamo inner/
    [info] [selblocks] branch => @15: [catch|/blamo inner/]
    [info] Executing: |catch | /blamo inner/ | |
    [info] Executing: |emit | "caught '" + _error.message + "'" | |
    [info] Executing: |finally | | |
    [info] Executing: |emit | "finally" | |
    [info] Executing: |endTry | t-spec-inner | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | -1 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |emit | "/])" | |
    [info] Executing: |endTry | t-spec-outer | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | -1 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |emit | "/])" | |
    [info] Executing: |assertEmitted | "([/~trying outer~([/~trying inner~caught 'blamo inner'~finally~/])~/])" | |
    [info] Test case passed
    [info] Playing test case try06 - catch-throw, finally-throw
    [info] Executing: |log | "-- catch/throw, finally/throw --" | |
    [info] [selbench] -- catch/throw, finally/throw --
    [info] Executing: |resetEmitted | | |
    [info] Executing: |emit | "([/" | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | -1 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |try | tcf-trap | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | 0 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |try | tcf | |
    [info] Executing: |emit | "trying" | |
    [info] Executing: |emit | "throwing A" | |
    [info] Executing: |throw | "blamoA" | |
    [info] [selblocks] @12, error has been caught :: /blamoA/
    [info] [selblocks] branch => @14: [catch|/blamoA/]
    [info] Executing: |catch | /blamoA/ | |
    [info] Executing: |emit | "caught '" + _error.message + "'" | |
    [info] Executing: |emit | "throwing B" | |
    [info] Executing: |throw | "blamoB" | |
    [info] [selblocks] Bubbling suspended while finally block runs
    [info] [selblocks] branch => @18: [finally]
    [info] Executing: |finally | | |
    [info] Executing: |emit | "finally" | |
    [info] Executing: |emit | "throwing C" | |
    [info] Executing: |throw | "blamoC" | |
    [info] [selblocks] No further handling, error bubbling will continue outside of this try.
    [info] [selblocks] branch => @22: [endTry]
    [info] Executing: |endTry | | |
    [info] [selblocks] @22, error has been caught :: @21
    [info] [selblocks] branch => @25: [catch]
    [info] Executing: |catch | | |
    [info] Executing: |emit | "caught '" + _error.message + "'" | |
    [info] Executing: |endTry | | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | -1 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |emit | "/])" | |
    [info] Executing: |assertEmitted | "([/~trying~throwing A~caught 'blamoA'~throwing B~finally~throwing C~caught 'blamoC'~/])" | |
    [info] Test case passed
    [info] Playing test case try07 - bubble up to catch ALL
    [info] Executing: |log | "-- bubble up to catch ALL --" | |
    [info] [selbench] -- bubble up to catch ALL --
    [info] Executing: |resetEmitted | | |
    [info] Executing: |emit | "([/" | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | -1 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |try | t-all-outer | |
    [info] Executing: |emit | "trying-outer" | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | 0 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |try | t-all-inner | |
    [info] Executing: |emit | "trying" | |
    [info] Executing: |throw | "blamo try-catch-finally" | |
    [info] [selblocks] No further handling, error bubbling will continue outside of this try.
    [info] [selblocks] branch => @16: [endTry|t-all-inner]
    [info] Executing: |endTry | t-all-inner | |
    [info] [selblocks] @16, error has been caught :: @12
    [info] [selblocks] branch => @19: [catch]
    [info] Executing: |catch | | |
    [info] Executing: |emit | "caught-outer '" + _error.message + "'" | |
    [info] Executing: |endTry | t-all-outer | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | -1 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |emit | "/])" | |
    [info] Executing: |assertEmitted | "([/~trying-outer~trying~caught-outer 'blamo try-catch-finally'~/])" | |
    [info] Test case passed
    [info] Playing test case try08 - bubble up to catch ALL via finally
    [info] Executing: |log | "-- bubble up to catch ALL via finally --" | |
    [info] [selbench] -- bubble up to catch ALL via finally --
    [info] Executing: |resetEmitted | | |
    [info] Executing: |emit | "([/" | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | -1 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |try | t-allfin-outer | |
    [info] Executing: |emit | "trying-outer" | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | 0 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |try | t-allfin-inner | |
    [info] Executing: |emit | "trying" | |
    [info] Executing: |throw | "blamo try-catch-finally" | |
    [info] [selblocks] Bubbling suspended while finally block runs
    [info] [selblocks] branch => @16: [finally]
    [info] Executing: |finally | | |
    [info] Executing: |emit | "finally" | |
    [info] Executing: |endTry | t-allfin-inner | |
    [info] [selblocks] @18, error has been caught :: @12
    [info] [selblocks] branch => @21: [catch]
    [info] Executing: |catch | | |
    [info] Executing: |emit | "caught-outer '" + _error.message + "'" | |
    [info] Executing: |endTry | t-allfin-outer | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | -1 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |emit | "/])" | |
    [info] Executing: |assertEmitted | "([/~trying-outer~trying~finally~caught-outer 'blamo try-catch-finally'~/])" | |
    [info] Test case passed
    [info] Playing test case try09 - bubble out of no-op try to catch specific error
    [info] Executing: |log | "-- bubble out of no-op try to catch specific error --" | |
    [info] [selbench] -- bubble out of no-op try to catch specific error --
    [info] Executing: |resetEmitted | | |
    [info] Executing: |emit | "([/" | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | -1 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |try | noop-outer | |
    [info] Executing: |emit | "trying outer" | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | 0 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |try | op-inner | |
    [warn] [selblocks] @10: [try|op-inner] does not have a catch-block nor a finally-block, and therefore serves no purpose
    [info] Executing: |emit | "trying inner" | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | 1 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |emit | "throwing inner" | |
    [info] Executing: |throw | "blamo" | |
    [info] [selblocks] No further handling, error bubbling will continue outside of this try.
    [info] [selblocks] branch => @16: [endTry|op-inner]
    [info] Executing: |endTry | op-inner | |
    [info] [selblocks] @16, error has been caught :: @14 /blamo/
    [info] [selblocks] branch => @18: [catch|/blamo/]
    [info] Executing: |catch | /blamo/ | |
    [info] Executing: |emit | "caught '" + _error.message + "'" | |
    [info] Executing: |finally | | |
    [info] Executing: |emit | "finally" | |
    [info] Executing: |endTry | noop-outer | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | -1 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |emit | "/])" | |
    [info] Executing: |assertEmitted | "([/~trying outer~trying inner~throwing inner~caught 'blamo'~finally~/])" | |
    [info] Test case passed
    [info] Playing test case try10 - bubble up to catch specific error
    [info] Executing: |log | "-- bubble up to catch specific error --" | |
    [info] [selbench] -- bubble up to catch specific error --
    [info] Executing: |resetEmitted | | |
    [info] Executing: |emit | "([/" | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | -1 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |try | bub-spec-outer | |
    [info] Executing: |emit | "trying outer" | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | 0 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |try | bub-spec-inner | |
    [info] Executing: |emit | "trying inner" | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | 1 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |emit | "throwing inner" | |
    [info] Executing: |throw | "blamo" | |
    [info] [selblocks] Bubbling suspended while finally block runs
    [info] [selblocks] branch => @16: [finally]
    [info] Executing: |finally | | |
    [info] Executing: |emit | "finally" | |
    [info] Executing: |endTry | bub-spec-inner | |
    [info] [selblocks] @18, error has been caught :: @14 /blamo/
    [info] [selblocks] branch => @20: [catch|/blamo/]
    [info] Executing: |catch | /blamo/ | |
    [info] Executing: |emit | "caught '" + _error.message + "'" | |
    [info] Executing: |endTry | bub-spec-outer | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | -1 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |emit | "/])" | |
    [info] Executing: |assertEmitted | "([/~trying outer~trying inner~throwing inner~finally~caught 'blamo'~/])" | |
    [info] Test case passed
    [info] Playing test case try11 - bubble up to catch specific error via finally
    [info] Executing: |log | "-- bubble up to catch specific error via finally --" | |
    [info] [selbench] -- bubble up to catch specific error via finally --
    [info] Executing: |resetEmitted | | |
    [info] Executing: |emit | "([/" | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | -1 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |try | bub-spec-outer | |
    [info] Executing: |emit | "trying outer" | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | 0 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |try | bub-spec-inner | |
    [info] Executing: |emit | "trying inner" | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | 1 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |emit | "throwing inner" | |
    [info] Executing: |throw | "blamo" | |
    [info] [selblocks] Bubbling suspended while finally block runs
    [info] [selblocks] branch => @16: [finally]
    [info] Executing: |finally | | |
    [info] Executing: |emit | "finally" | |
    [info] Executing: |endTry | bub-spec-inner | |
    [info] [selblocks] @18, error has been caught :: @14 /blamo/
    [info] [selblocks] branch => @20: [catch|/blamo/]
    [info] Executing: |catch | /blamo/ | |
    [info] Executing: |emit | "caught '" + _error.message + "'" | |
    [info] Executing: |finally | | |
    [info] Executing: |emit | "finally" | |
    [info] Executing: |endTry | bub-spec-outer | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | -1 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |emit | "/])" | |
    [info] Executing: |assertEmitted | "([/~trying outer~trying inner~throwing inner~finally~caught 'blamo'~finally~/])" | |
    [info] Test case passed
    [info] Playing test case try12 - throw, catch, rethrow
    [info] Executing: |log | "-- throw, catch, rethrow --" | |
    [info] [selbench] -- throw, catch, rethrow --
    [info] Executing: |resetEmitted | | |
    [info] Executing: |emit | "([/" | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | -1 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |try | outer | |
    [info] Executing: |emit | "trying outer" | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | 0 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |try | inner | |
    [info] Executing: |emit | "trying inner" | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | 1 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |emit | "throwing blamo1" | |
    [info] Executing: |throw | "blamo1" | |
    [info] [selblocks] @14, error has been caught :: /blamo1/
    [info] [selblocks] branch => @16: [catch|/blamo1/]
    [info] Executing: |catch | /blamo1/ | |
    [info] Executing: |emit | "caught '" + _error.message + "'" | |
    [info] Executing: |emit | "throwing blamo2" | |
    [info] Executing: |throw | "blamo2" | |
    [info] [selblocks] No further handling, error bubbling will continue outside of this try.
    [info] [selblocks] branch => @20: [endTry|inner]
    [info] Executing: |endTry | inner | |
    [info] [selblocks] @20, error has been caught :: @19 /blamo2/
    [info] [selblocks] branch => @22: [catch|/blamo2/]
    [info] Executing: |catch | /blamo2/ | |
    [info] Executing: |emit | "caught '" + _error.message + "'" | |
    [info] Executing: |endTry | outer | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | -1 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |emit | "/])" | |
    [info] Executing: |assertEmitted | "([/~trying outer~trying inner~throwing blamo1~caught 'blamo1'~throwing blamo2~caught 'blamo2'~/])" | |
    [info] Test case passed
    [info] Playing test case try13 - bubble out of nested function calls
    [info] Executing: |log | "-- bubble out of nested function calls --" | |
    [info] [selbench] -- bubble out of nested function calls --
    [info] Executing: |resetEmitted | | |
    [info] Executing: |emit | "([/" | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | -1 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |try | bub-invoke | |
    [info] Executing: |emit | "trying" | |
    [info] Executing: |emit | "calling" | |
    [info] Executing: |call | subBub | n = 0 |
    [info] [selblocks] branch => @18: [function|subBub]
    [info] Executing: |function | subBub | |
    [info] Executing: |try | tcf-inner | |
    [info] Executing: |emit | "${n}) trying-inner" | |
    [info] Executing: |if | n < 2 | |
    [info] Executing: |emit | "${n}) calling" | |
    [info] Executing: |call | subBub | n = n+1 |
    [info] [selblocks] branch => @18: [function|subBub]
    [info] Executing: |function | subBub | |
    [info] Executing: |try | tcf-inner | |
    [info] Executing: |emit | "${n}) trying-inner" | |
    [info] Executing: |if | n < 2 | |
    [info] Executing: |emit | "${n}) calling" | |
    [info] Executing: |call | subBub | n = n+1 |
    [info] [selblocks] branch => @18: [function|subBub]
    [info] Executing: |function | subBub | |
    [info] Executing: |try | tcf-inner | |
    [info] Executing: |emit | "${n}) trying-inner" | |
    [info] Executing: |if | n < 2 | |
    [info] [selblocks] branch => @25: [else]
    [info] Executing: |else | | |
    [info] Executing: |emit | "${n}) throwing" | |
    [info] Executing: |throw | "blamo" | |
    [info] [selblocks] Bubbling suspended while finally block runs
    [info] [selblocks] branch => @29: [finally]
    [info] Executing: |finally | | |
    [info] Executing: |emit | "${n}) finally" | |
    [info] Executing: |endTry | tcf-inner | |
    [info] [selblocks] function 'subBub' aborting due to error
    [info] [selblocks] Bubbling suspended while finally block runs
    [info] [selblocks] branch => @29: [finally]
    [info] Executing: |finally | | |
    [info] Executing: |emit | "${n}) finally" | |
    [info] Executing: |endTry | tcf-inner | |
    [info] [selblocks] function 'subBub' aborting due to error
    [info] [selblocks] Bubbling suspended while finally block runs
    [info] [selblocks] branch => @29: [finally]
    [info] Executing: |finally | | |
    [info] Executing: |emit | "${n}) finally" | |
    [info] Executing: |endTry | tcf-inner | |
    [info] [selblocks] function 'subBub' aborting due to error
    [info] [selblocks] @31, error has been caught :: @31 /blamo/
    [info] [selblocks] branch => @11: [catch|/blamo/]
    [info] Executing: |catch | /blamo/ | |
    [info] Executing: |emit | "caught '" + _error.message + "'" | |
    [info] Executing: |finally | | |
    [info] Executing: |emit | "finally" | |
    [info] Executing: |endTry | bub-invoke | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | -1 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |function | subBub | |
    [info] [selblocks] branch => @34: [endFunction]
    [info] Executing: |endFunction | | |
    [info] Executing: |emit | "/])" | |
    [info] Executing: |assertEmitted | "([/~trying~calling~0) trying-inner~0) calling~1) trying-inner~1) calling~2) trying-inner~2) throwing~2) finally~1) finally~0) finally~caught 'blamo'~finally~/])" | |
    [info] Test case passed
    [info] Playing test case try14 - command bubbling, break wfinally
    [info] Executing: |log | "-- command bubbling, break w/finally --" | |
    [info] [selbench] -- command bubbling, break w/finally --
    [info] Executing: |resetEmitted | | |
    [info] Executing: |emit | "([/" | |
    [info] Executing: |emit | "while'g" | |
    [info] Executing: |for | w=3; w > 0; w-- | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | -1 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |try | breaker | |
    [info] Executing: |emit | "${w}) trying" | |
    [info] Executing: |if | w==2 | |
    [info] [selblocks] branch => @13: [endIf]
    [info] Executing: |endIf | | |
    [info] Executing: |finally | | |
    [info] Executing: |emit | "${w}) finallying" | |
    [info] Executing: |endTry | breaker | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | -1 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |emit | "${w}) iterating" | |
    [info] Executing: |endFor | | |
    [info] [selblocks] branch => @5: [for|w=3; w > 0; w--]
    [info] Executing: |for | w=3; w > 0; w-- | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | -1 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |try | breaker | |
    [info] Executing: |emit | "${w}) trying" | |
    [info] Executing: |if | w==2 | |
    [info] Executing: |emit | "${w}) BREAK" | |
    [info] Executing: |break | | |
    [info] [selblocks] Command @12: [break], suspended while finally block runs
    [info] [selblocks] branch => @14: [finally]
    [info] Executing: |finally | | |
    [info] Executing: |emit | "${w}) finallying" | |
    [info] Executing: |endTry | breaker | |
    [info] [selblocks] command-bubbling complete - suspended command executing now @12: [break]
    [info] [selblocks] branch => @12: [break]
    [info] Executing: |break | | |
    [info] [selblocks] branch => @20: [endFor]
    [info] Executing: |endFor | | |
    [info] Executing: |emit | "/])" | |
    [info] Executing: |assertEmitted | "([/~while'g~3) trying~3) finallying~3) iterating~2) trying~2) BREAK~2) finallying~/])" | |
    [info] Test case passed
    [info] Playing test case try15 - command bubbling, intra-try break
    [info] Executing: |log | "-- command bubbling, intra-try break --" | |
    [info] [selbench] -- command bubbling, intra-try break --
    [info] Executing: |resetEmitted | | |
    [info] Executing: |emit | "([/" | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | -1 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |try | breaker | |
    [info] Executing: |emit | "trying" | |
    [info] Executing: |emit | "while'g" | |
    [info] Executing: |for | w=3; w > 0; w-- | |
    [info] Executing: |if | w==2 | |
    [info] [selblocks] branch => @13: [endIf]
    [info] Executing: |endIf | | |
    [info] Executing: |emit | "${w}) iterating" | |
    [info] Executing: |endFor | | |
    [info] [selblocks] branch => @9: [for|w=3; w > 0; w--]
    [info] Executing: |for | w=3; w > 0; w-- | |
    [info] Executing: |if | w==2 | |
    [info] Executing: |emit | "${w}) BREAK" | |
    [info] Executing: |break | | |
    [info] [selblocks] branch => @15: [endFor]
    [info] Executing: |endFor | | |
    [info] Executing: |finally | | |
    [info] Executing: |emit | "finallying" | |
    [info] Executing: |endTry | breaker | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | -1 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |emit | "/])" | |
    [info] Executing: |assertEmitted | "([/~trying~while'g~3) iterating~2) BREAK~finallying~/])" | |
    [info] Test case passed
    [info] Playing test case try16 - command bubbling, continue w-finally
    [info] Executing: |log | "-- command bubbling, continue w/finally --" | |
    [info] [selbench] -- command bubbling, continue w/finally --
    [info] Executing: |resetEmitted | | |
    [info] Executing: |emit | "([/" | |
    [info] Executing: |emit | "while'g" | |
    [info] Executing: |for | w=3; w > 0; w-- | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | -1 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |try | continuer | |
    [info] Executing: |emit | "${w}) trying" | |
    [info] Executing: |if | w==2 | |
    [info] [selblocks] branch => @13: [endIf]
    [info] Executing: |endIf | | |
    [info] Executing: |finally | | |
    [info] Executing: |emit | "${w}) finallying" | |
    [info] Executing: |endTry | continuer | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | -1 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |emit | "${w}) iterating" | |
    [info] Executing: |endFor | | |
    [info] [selblocks] branch => @5: [for|w=3; w > 0; w--]
    [info] Executing: |for | w=3; w > 0; w-- | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | -1 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |try | continuer | |
    [info] Executing: |emit | "${w}) trying" | |
    [info] Executing: |if | w==2 | |
    [info] Executing: |emit | "${w}) CONTINUE" | |
    [info] Executing: |continue | | |
    [info] [selblocks] Command @12: [continue], suspended while finally block runs
    [info] [selblocks] branch => @14: [finally]
    [info] Executing: |finally | | |
    [info] Executing: |emit | "${w}) finallying" | |
    [info] Executing: |endTry | continuer | |
    [info] [selblocks] command-bubbling complete - suspended command executing now @12: [continue]
    [info] [selblocks] branch => @12: [continue]
    [info] Executing: |continue | | |
    [info] [selblocks] branch => @5: [for|w=3; w > 0; w--]
    [info] Executing: |for | w=3; w > 0; w-- | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | -1 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |try | continuer | |
    [info] Executing: |emit | "${w}) trying" | |
    [info] Executing: |if | w==2 | |
    [info] [selblocks] branch => @13: [endIf]
    [info] Executing: |endIf | | |
    [info] Executing: |finally | | |
    [info] Executing: |emit | "${w}) finallying" | |
    [info] Executing: |endTry | continuer | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | -1 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |emit | "${w}) iterating" | |
    [info] Executing: |endFor | | |
    [info] [selblocks] branch => @5: [for|w=3; w > 0; w--]
    [info] Executing: |for | w=3; w > 0; w-- | |
    [info] [selblocks] branch => @20: [endFor]
    [info] Executing: |endFor | | |
    [info] Executing: |emit | "/])" | |
    [info] Executing: |assertEmitted | "([/~while'g~3) trying~3) finallying~3) iterating~2) trying~2) CONTINUE~2) finallying~1) trying~1) finallying~1) iterating~/])" | |
    [info] Test case passed
    [info] Playing test case try17 - command bubbling, intra-try continue
    [info] Executing: |log | "-- command bubbling, intra-try continue --" | |
    [info] [selbench] -- command bubbling, intra-try continue --
    [info] Executing: |resetEmitted | | |
    [info] Executing: |emit | "([/" | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | -1 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |try | continuer | |
    [info] Executing: |emit | "trying" | |
    [info] Executing: |emit | "while'g" | |
    [info] Executing: |for | w=3; w > 0; w-- | |
    [info] Executing: |if | w==2 | |
    [info] [selblocks] branch => @13: [endIf]
    [info] Executing: |endIf | | |
    [info] Executing: |emit | "${w}) iterating" | |
    [info] Executing: |endFor | | |
    [info] [selblocks] branch => @9: [for|w=3; w > 0; w--]
    [info] Executing: |for | w=3; w > 0; w-- | |
    [info] Executing: |if | w==2 | |
    [info] Executing: |emit | "${w}) CONTINUE" | |
    [info] Executing: |continue | | |
    [info] [selblocks] branch => @9: [for|w=3; w > 0; w--]
    [info] Executing: |for | w=3; w > 0; w-- | |
    [info] Executing: |if | w==2 | |
    [info] [selblocks] branch => @13: [endIf]
    [info] Executing: |endIf | | |
    [info] Executing: |emit | "${w}) iterating" | |
    [info] Executing: |endFor | | |
    [info] [selblocks] branch => @9: [for|w=3; w > 0; w--]
    [info] Executing: |for | w=3; w > 0; w-- | |
    [info] [selblocks] branch => @15: [endFor]
    [info] Executing: |endFor | | |
    [info] Executing: |finally | | |
    [info] Executing: |emit | "finallying" | |
    [info] Executing: |endTry | continuer | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | -1 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |emit | "/])" | |
    [info] Executing: |assertEmitted | "([/~trying~while'g~3) iterating~2) CONTINUE~1) iterating~finallying~/])" | |
    [info] Test case passed
    [info] Playing test case try18 - command bubbling, error replaced by return
    [info] Executing: |log | "-- command bubbling, error replaced by return --" | |
    [info] [selbench] -- command bubbling, error replaced by return --
    [info] Executing: |resetEmitted | | |
    [info] Executing: |emit | "([/" | |
    [info] Executing: |emit | "calling" | |
    [info] Executing: |call | cmdBubA | |
    [info] [selblocks] branch => @7: [function|cmdBubA]
    [info] Executing: |function | cmdBubA | |
    [info] Executing: |emit | "in cmdBubA" | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | -1 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |try | cmdBub-tcf | |
    [info] Executing: |emit | "trying" | |
    [info] Executing: |emit | "returning (1)" | |
    [info] Executing: |return | 1 | |
    [info] [selblocks] Command @14: [return|1], suspended while finally block runs
    [info] [selblocks] branch => @15: [finally]
    [info] Executing: |finally | | |
    [info] Executing: |emit | "finallying" | |
    [info] Executing: |emit | "returning (2)" | |
    [info] Executing: |return | 2 | |
    [info] Executing: |endTry | | |
    [info] [selblocks] command-bubbling complete - suspended command executing now @18: [return|2]
    [info] [selblocks] branch => @18: [return|2]
    [info] Executing: |return | 2 | |
    [info] [selblocks] branch => @5: [call|cmdBubA]
    [info] Executing: |call | cmdBubA | |
    [info] Executing: |emit | "returned ${_result}" | |
    [info] Executing: |function | cmdBubA | |
    [info] [selblocks] branch => @22: [endFunction]
    [info] Executing: |endFunction | | |
    [info] Executing: |emit | "/])" | |
    [info] Executing: |assertEmitted | "([/~calling~in cmdBubA~trying~returning (1)~finallying~returning (2)~returned 2~/])" | |
    [info] Test case passed
    [info] Playing test case try19 - command bubbling, error replaced by throw
    [info] Executing: |log | "-- command bubbling, error replaced by return --" | |
    [info] [selbench] -- command bubbling, error replaced by return --
    [info] Executing: |resetEmitted | | |
    [info] Executing: |emit | "([/" | |
    [info] Executing: |emit | "calling" | |
    [info] Executing: |call | cmdBubB | |
    [info] [selblocks] branch => @7: [function|cmdBubB]
    [info] Executing: |function | cmdBubB | |
    [info] Executing: |emit | "in cmdBubB" | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | -1 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |try | cmdBub-tcf | |
    [info] Executing: |emit | "trying" | |
    [info] Executing: |emit | "throwing" | |
    [info] Executing: |throw | "short-lived error" | |
    [info] [selblocks] Bubbling suspended while finally block runs
    [info] [selblocks] branch => @15: [finally]
    [info] Executing: |finally | | |
    [info] Executing: |emit | "finallying" | |
    [info] Executing: |emit | "returning (2)" | |
    [info] Executing: |return | 2 | |
    [info] Executing: |endTry | | |
    [info] [selblocks] command-bubbling complete - suspended command executing now @18: [return|2]
    [info] [selblocks] branch => @18: [return|2]
    [info] Executing: |return | 2 | |
    [info] [selblocks] branch => @5: [call|cmdBubB]
    [info] Executing: |call | cmdBubB | |
    [info] Executing: |emit | "returned ${_result}" | |
    [info] Executing: |function | cmdBubB | |
    [info] [selblocks] branch => @22: [endFunction]
    [info] Executing: |endFunction | | |
    [info] Executing: |emit | "/])" | |
    [info] Executing: |assertEmitted | "([/~calling~in cmdBubB~trying~throwing~finallying~returning (2)~returned 2~/])" | |
    [info] Test case passed
    [info] Playing test case try20 - command bubbling, return replaced by error
    [info] Executing: |log | "-- command bubbling, return replaced by error --" | |
    [info] [selbench] -- command bubbling, return replaced by error --
    [info] Executing: |resetEmitted | | |
    [info] Executing: |emit | "([/" | |
    [info] Executing: |emit | "calling" | |
    [info] Executing: |call | cmdBubC | |
    [info] [selblocks] branch => @7: [function|cmdBubC]
    [info] Executing: |function | cmdBubC | |
    [info] Executing: |emit | "in cmdBubC" | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | -1 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |try | cmdBub-tcf-guardrail | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | 0 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |try | cmdBub-tcf | |
    [info] Executing: |emit | "trying" | |
    [info] Executing: |emit | "returning (1)" | |
    [info] Executing: |return | 1 | |
    [info] [selblocks] Command @17: [return|1], suspended while finally block runs
    [info] [selblocks] branch => @18: [finally]
    [info] Executing: |finally | | |
    [info] Executing: |emit | "finallying" | |
    [info] Executing: |emit | "throwing" | |
    [info] Executing: |throw | "this-error-replaces-return-1" | |
    [info] [selblocks] No further handling, error bubbling will continue outside of this try.
    [info] [selblocks] branch => @22: [endTry]
    [info] Executing: |endTry | | |
    [info] [selblocks] @22, error has been caught :: @21 /this-error-replaces-return-1/
    [info] [selblocks] branch => @24: [catch|/this-error-replaces-return-1/]
    [info] Executing: |catch | /this-error-replaces-return-1/ | |
    [info] Executing: |emit | "caught '" + _error.message + "'" | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | 0 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |endTry | | |
    [info] Executing: |endFunction | | |
    [info] [selblocks] branch => @5: [call|cmdBubC]
    [info] Executing: |call | cmdBubC | |
    [info] Executing: |emit | "returned ${_result}" | |
    [info] Executing: |function | cmdBubC | |
    [info] [selblocks] branch => @29: [endFunction]
    [info] Executing: |endFunction | | |
    [info] Executing: |emit | "/])" | |
    [info] Executing: |assertEmitted | "([/~calling~in cmdBubC~trying~returning (1)~finallying~throwing~caught 'this-error-replaces-return-1'~returned 2~/])" | |
    [info] Test case passed
    [info] Playing test case try21 - catch failed verify command
    [info] Executing: |log | "-- catch failed verify command --" | |
    [info] [selbench] -- catch failed verify command --
    [info] Executing: |resetEmitted | | |
    [info] Executing: |emit | "([/" | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | -1 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |try | tcv1 | |
    [info] Executing: |verifyEval | 1 | 2 |
    [info] script is: 1
    [info] [selblocks] @7, error has been caught ::
    [info] [selblocks] branch => @9: [catch]
    [info] Executing: |catch | | |
    [info] Executing: |emit | "caught '" + _error.message + "'" | |
    [info] Executing: |endTry | | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | -1 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |emit | "/])" | |
    [info] Executing: |assertEmitted | "([/~caught 'Actual value '1' did not match '2''~/])" | |
    [info] Test case passed
    [info] Playing test case try22 - exitTest w-finally processing
    [info] Executing: |log | "-- exitTest w/finally processing --" | |
    [info] [selbench] -- exitTest w/finally processing --
    [info] Executing: |resetEmitted | | |
    [info] Executing: |emit | "([/" | |
    [info] Executing: |assertEval | selblocks.tcf.nestingLevel | -1 |
    [info] script is: selblocks.tcf.nestingLevel
    [info] Executing: |try | abort | |
    [info] Executing: |emit | "trying" | |
    [info] Executing: |emit | "exitTest ..." | |
    [info] Executing: |exitTest | | |
    [info] [selblocks] Command @9: [exitTest], suspended while finally block runs
    [info] [selblocks] branch => @10: [finally]
    [info] Executing: |finally | | |
    [info] Executing: |emit | "finallying" | |
    [info] Executing: |assertEmitted | "([/~trying~exitTest ...~finallying" | |
    [info] Executing: |resetEmitted | | |
    [info] Executing: |endTry | abort | |
    [info] [selblocks] command-bubbling complete - suspended command executing now @9: [exitTest]
    [info] [selblocks] branch => @9: [exitTest]
    [info] Executing: |exitTest | | |
    [info] Test case passed
    [info] Test suite completed: 50 played, all passed!
    [info] [selblocks] TEST HALTED 

